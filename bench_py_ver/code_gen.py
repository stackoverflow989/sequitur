import os
from typing import List
from block import Block
from block_to_code import Code
from opt import Convexopt,Minimize,Differential_evolution

my_cmd_papi = " -I/home/xuqingguo/common/papi/src/install/include -L/home/xuqingguo/common/papi/src/install/lib -std=c99 -lpapi "
path = './'

def get_now_metric(block:Block,env_var) -> List:
    global my_cmd_papi,path
    os.environ["PAPI_MON_EVENTS"] = env_var
    codename = 'temp_block'
    code = Code(path,[block],'withpapi',codename)
    code.gen_code()
    cmd = "gcc "+code.codec+my_cmd_papi+"-o "+ codename
    os.system(cmd)
    f = os.popen(path+codename)
    metric = f.readline().strip().split(" ")
    return [int(i) for i in metric]

def find_best_cmiss(block:Block):
    target = block.target[block.trans['l1_dcm']]
    left = 0
    right = 2*target
    while left<right-1:
        mid = (left+right)//2
        block.param.cachenum = mid
        now_cmiss = get_now_metric(block,'PAPI_L1_DCM')[0]
        #print(now_cmiss,target,mid)
        if abs(now_cmiss-target)/target < 0.02 or abs(now_cmiss-target) < 100:
            break
        if now_cmiss < target:
            left = mid+1
        else:
            right = mid-1

def find_best_bmiss(block:Block):
    target = block.target[block.trans['br_msp']]
    if target < 200:return
    left = 0
    right = 2*target
    while left<right-1:
        mid = (left+right)//2
        block.param.branchnum = mid
        now_bmiss = get_now_metric(block,'PAPI_BR_MSP')[0]
        #print(now_bmiss,target,mid)
        if abs(now_bmiss-target)/target < 0.02 or abs(now_bmiss-target) < 200:
            break
        if now_bmiss < target:
            left = mid+1
        else:
            right = mid-1

def if_need_unroll(block:Block):
    record_cachenum = block.param.cachenum
    while block.param.unroll <= 4:
        temp_metric = []
        for i in range(5):
            temp_metric.append(get_now_metric(block,'PAPI_BR_CN:PAPI_TOT_CYC:PAPI_TOT_INS'))
        now_metric = [sum(e)/len(e) for e in zip(*temp_metric)]
        #print_compare_block(block)
        if now_metric[0]<0.9*block.target[block.trans['br_cn']] and now_metric[1]<0.7*block.target[block.trans['cyc']]:
            break
        block.param.unroll += 1
        block.param.cachenum = record_cachenum // (1<<block.param.unroll)

def find_best_rest(block:Block):
    temp_metric = []
    for i in range(5):
        temp_metric.append(get_now_metric(block,'PAPI_TOT_CYC:PAPI_TOT_INS:PAPI_LST_INS'))
    now_metric = [int(sum(e)/len(e)) for e in zip(*temp_metric)]
    now_br = get_now_metric(block,'PAPI_BR_CN')[0]
    block.param.restbranch = block.target[block.trans['br_cn']]-int(now_br)
    need_cyc = max(block.target[block.trans['cyc']] - now_metric[0] - block.param.restbranch,0)
    need_ins = max(block.target[block.trans['ins']] - now_metric[1] - 3*block.param.restbranch,0)
    need_lst = max(block.target[block.trans['lst']] - now_metric[2],0)
    y = [need_cyc,need_ins,need_lst]
    z = [block.target[block.trans['cyc']],block.target[block.trans['ins']],block.target[block.trans['lst']]]
    param_for_x = [     #order:add pause nop div
        [1,  10,0.27,  16],
        [4,   1,   1,   3],
        [3,   0,   0,   3]
    ]
    #Opt = Minimize(y,z,param_for_x)
    Opt = Differential_evolution(y,z,param_for_x)
    block.param.add,block.param.pause,block.param.nop,block.param.div = Opt.findmin()


def print_compare_block(block:Block):
    now_metric = get_now_metric(block,'PAPI_LST_INS:PAPI_L1_DCM:PAPI_TOT_INS')
    now_metric += get_now_metric(block,'PAPI_TOT_CYC:PAPI_BR_CN:PAPI_BR_MSP')
    print(block.target)
    print(now_metric)

def find_best_block(block:Block):
    find_best_cmiss(block)
    #print("cachemiss clear")
    find_best_bmiss(block)
    #print("branchmiss clear")
    if_need_unroll(block)
    #print("unroll clear")
    find_best_rest(block)
    #print("rest clear")
    print_compare_block(block)


if __name__ == "__main__":
    #MG.B
    #data = {0: [2971, 596, 5828, 37542, 903, 44], 1: [2063, 318, 3939, 19869, 587, 44], 2: [166, 17, 363, 1391, 59, 0], 3: [15262031, 580255, 73719087, 54162876, 12920800, 67880], 4: [945, 280, 1798, 2007, 277, 20], 7: [2231625, 278870, 13471545, 14923318, 2264974, 17134], 8: [34615, 452, 136578, 135435, 34010, 20], 9: [33403, 19223, 193181, 771608, 16709, 138], 13: [66927, 23401, 317289, 332449, 50518, 137], 14: [34506, 4403, 137873, 73058, 34085, 4], 15: [33998, 4542, 169992, 152929, 17110, 136], 18: [67310, 8614, 303469, 172029, 50775, 136], 23: [4228846, 272274, 25485685, 19252101, 4244575, 16688], 24: [39592815, 1972742, 86726020, 54187959, 4326539, 33111], 39: [34311, 2318, 171120, 120016, 17231, 143], 41: [8891286, 492337, 20589137, 20428864, 591073, 4443], 43: [8612, 4858, 49060, 113827, 4304, 70], 46: [42283, 8973, 181417, 120378, 38102, 69], 48: [8932, 1248, 44279, 41300, 4499, 69], 54: [9057, 668, 44824, 27788, 4559, 75], 55: [1168223, 65744, 2763148, 2108911, 108071, 1152], 57: [2375, 1253, 12813, 15483, 1164, 11], 63: [2531, 389, 12148, 9366, 1263, 31], 69: [179607, 11348, 479054, 273650, 45433, 82], 71: [826, 309, 3754, 3755, 377, 5], 78: [51663, 4824, 178328, 91199, 36059, 40], 102: [153369, 7627, 450638, 252329, 54035, 117], 105: [126277, 6167, 332984, 172059, 43750, 46], 111: [881617, 33782, 2354403, 1361427, 172427, 2358], 124: [713043, 22798, 1593048, 1103632, 105830, 171], 131: [6414426, 236027, 16779592, 10449411, 1060475, 15774], 143: [5238140, 156103, 11332377, 6759183, 583270, 8296], 156: [47330252, 2585723, 115708934, 80291982, 5705030, 54062], 191: [15270349, 1104742, 73878201, 76566228, 12937511, 67970], 217: [8887868, 870871, 20571178, 18875840, 589263, 4409], 252: [713049, 23043, 1593051, 914532, 105830, 1135], 314: [8888299, 841102, 20572597, 12660929, 589397, 8355], 328: [1168239, 65238, 2763154, 1765006, 108071, 451], 360: [881583, 33626, 2354398, 1039332, 172427, 836], 387: [47329349, 1833770, 115709431, 84479916, 5705030, 54105], 703: [713048, 23424, 1593152, 1010067, 105830, 616], 954: [39924889, 1368493, 87060365, 54830870, 4327123, 33115], 5: [34632, 1436, 136578, 113287, 34010, 13], 6: [881622, 33013, 2354410, 1017079, 172427, 3543], 10: [713046, 22880, 1593048, 668722, 105830, 2120], 11: [1168204, 67050, 2763147, 2097833, 108071, 208], 12: [881627, 32396, 2354417, 1529334, 172427, 1577], 16: [8888710, 478179, 20575633, 16110240, 589702, 7756], 17: [34741, 2910, 136578, 154194, 34010, 19], 19: [20394, 2275, 44283, 178172, 7396, 602], 20: [73301, 3921, 162336, 443091, 25684, 1477]}
    data = {0: [4041, 634, 7958, 36317, 1243, 70], 1: [614, 98, 1301, 2062, 119, 1], 3: [154145084, 201402, 635306425, 253069365, 12931038, 26633], 4: [1328, 176, 2646, 12761, 420, 31], 5: [262666, 50583, 489172, 2365325, 13844, 332], 6: [30000233, 554761, 99531013, 46358376, 3895252, 19564], 7: [262658, 34502, 423552, 1616795, 13844, 332], 8: [61607274, 5706022, 202023689, 202403850, 9366628, 62446], 16: [3090262, 201634, 12439770, 19482001, 1552806, 6695], 18: [971563, 46554, 2264809, 990418, 28446, 111], 39: [1424801, 68711, 3206759, 1511419, 53795, 207], 68: [7844354, 714840, 24027971, 48206082, 3160164, 13474], 75: [137685688, 563416, 559575222, 235874150, 11423899, 20816], 1174: [30048825, 557355, 99653928, 58133958, 3900629, 13770], 2296: [2690384, 360363, 11584023, 23142421, 1609570, 6826], 2301: [25882569, 171824, 97141091, 41164051, 2829196, 6708], 2302: [33531, 4859, 94068, 137193, 8862, 100], 2304: [12828, 510, 29433, 14740, 1732, 46], 2305: [52547, 7677, 171668, 219977, 13882, 217], 2306: [50390, 1831, 115886, 54235, 6689, 166], 2307: [52321, 17036, 208591, 448070, 13843, 216], 2: [146, 17, 498, 1195, 59, 0], 9: [151820517, 66816, 625718318, 247812724, 12704602, 26748], 10: [131561, 26062, 249254, 1622093, 6961, 168], 11: [59731140, 5546711, 196240803, 204676800, 9089565, 71867], 12: [513867, 24590, 1084061, 575679, 27608, 87], 13: [486225, 23287, 1247077, 448582, 1757, 20], 14: [138821247, 556078, 564180912, 244666106, 11494978, 14423], 15: [7804894, 718469, 23900362, 38094487, 3146351, 18493], 17: [848, 262, 3468, 3073, 397, 6], 19: [64413, 3858, 150917, 116559, 13746, 215], 20: [157865887, 38247, 650487480, 258497146, 13190103, 27772], 21: [131557, 17460, 214374, 664143, 6962, 164], 22: [155819806, 216696, 641926844, 254962412, 13045765, 37326], 23: [61551580, 5747317, 201810809, 211183215, 9371707, 37301], 24: [33014, 3044, 71698, 244403, 11793, 876], 25: [179742, 4033, 415453, 455442, 62667, 1936]}    #data = {0: [2970, 389, 5828, 30201, 903, 43], 1: [2062, 303, 3939, 21093, 587, 43], 2: [167, 18, 371, 1827, 59, 1], 3: [60041899, 2670268, 290774802, 239018110, 51131802, 133991], 4: [816, 207, 1874, 2840, 258, 24], 8: [8787694, 1093470, 52756657, 130214808, 8853900, 33831], 9: [134392, 1237, 534084, 551754, 133338, 20], 10: [66216, 41595, 384367, 2817184, 33099, 133], 14: [199021, 55948, 894826, 2105827, 166230, 135], 15: [134636, 16949, 537783, 426084, 133609, 4], 16: [66374, 8916, 332283, 409129, 33355, 136], 19: [181697, 24372, 737963, 694306, 151327, 96], 21: [133744, 16835, 669384, 737909, 67152, 265], 25: [16911245, 1076779, 101628581, 85010201, 16910175, 33210], 27: [156899080, 10966006, 343875316, 297597753, 17138329, 66059], 41: [134241, 9735, 669521, 535502, 67151, 274], 43: [35203802, 4509291, 81557323, 113295965, 2323461, 16772], 45: [16776, 9703, 96847, 622066, 8398, 70], 50: [16930, 2389, 84471, 135265, 8523, 69], 55: [34211, 4338, 171163, 165904, 17238, 135], 58: [34355, 2544, 171120, 116701, 17231, 141], 59: [4579880, 279068, 10848842, 15988483, 420775, 2310], 61: [4427, 2447, 24781, 113526, 2192, 36], 66: [4488, 703, 21992, 38659, 2251, 35], 71: [9026, 1184, 44852, 39848, 4563, 69], 73: [9064, 724, 44824, 32738, 4559, 71], 74: [704882, 48590, 1868913, 2562505, 172551, 575], 76: [1329, 628, 6702, 10079, 629, 10], 86: [2582, 363, 12448, 10160, 1296, 30], 91: [533, 185, 2122, 3624, 224, 6], 100: [912, 138, 3885, 4352, 430, 5], 161: [194922, 18078, 697987, 406298, 143943, 104], 171: [556588, 31587, 1636902, 1031206, 201975, 1214], 180: [480776, 26882, 1297775, 939801, 172420, 584], 183: [3346470, 137575, 8947703, 7707496, 654411, 7884], 197: [2739806, 97181, 6153498, 5335111, 410150, 4195], 210: [24967879, 1180975, 65342569, 70507202, 4114427, 35987], 224: [20517789, 807073, 44500962, 34071507, 2288614, 16631], 239: [186737112, 13281641, 457024301, 466175188, 22533702, 107981], 256: [98771, 72971, 391558, 3229720, 33106, 136], 284: [60072380, 4323023, 291406956, 415980461, 51198433, 134258], 700: [4579895, 281791, 10848839, 12776871, 420775, 4142], 800: [24966479, 1542177, 65342412, 70197755, 4114427, 35974], 843: [159305698, 7333967, 346304731, 278890513, 17141606, 66077], 883: [4579995, 473398, 10848832, 17803221, 420775, 2304], 971: [20517819, 1117205, 44500937, 33462611, 2288614, 16626], 1050: [704867, 50751, 1868908, 2352096, 172551, 140], 1163: [20517717, 600519, 44500907, 35202086, 2288614, 16617], 1239: [704955, 67785, 1868930, 1994562, 172551, 648], 2039: [35208608, 2730484, 81580136, 117268099, 2325755, 16786], 5: [474054, 26280, 1267672, 880507, 169798, 127], 6: [186734294, 9268272, 457026334, 472856189, 22533702, 107948], 7: [4580301, 453031, 10848785, 16834665, 420775, 4086], 11: [2739802, 88484, 6153497, 3266444, 410150, 2957], 12: [65955, 42023, 379073, 23802480, 33095, 143], 13: [563471, 32099, 1667678, 1017749, 204659, 1711], 17: [134548, 1678, 534084, 592342, 133338, 20], 18: [134656, 8515, 534084, 664305, 133338, 21], 20: [20396, 2003, 44239, 193319, 7385, 589], 22: [73658, 3143, 163247, 467024, 25812, 1475]}
    blocks = []
    count = 0
    for i in data.values():
        target = i
        print(count)
        block = Block(target,count)
        find_best_block(block)
        blocks.append(block)
        count += 1
    code = Code(path,blocks,'withoutpapi','block')
    code.gen_code()


    # data in input.txt
    # with open('./input.txt','r') as f:
    #     n = int(f.readline())
    #     blocks = []
    #     for i in range(n):
    #         target = [int(j) for j in f.readline().split(',')]
    #         block = Block(target,i)
    #         find_best_block(block)
    #         blocks.append(block)
    #     code = Code(path,blocks,'withoutpapi','block')
