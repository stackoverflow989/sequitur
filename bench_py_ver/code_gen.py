import os
from typing import List
from block import Block
from block_to_code import Code
from opt import Convexopt,Minimize,Differential_evolution,Find_opt

my_cmd_papi = " -I/home/xuqingguo/common/papi/src/install/include -L/home/xuqingguo/common/papi/src/install/lib -std=c99 -lpapi "
path = './'

def get_now_metric(block:Block,env_var) -> List:
    global my_cmd_papi,path
    os.environ["PAPI_MON_EVENTS"] = env_var
    codename = 'temp_block'
    code = Code(path,[block],'withpapi',codename)
    code.gen_code()
    cmd = "gcc "+code.codec+my_cmd_papi+"-o "+ codename
    os.system(cmd)
    f = os.popen(path+codename)
    metric = f.readline().strip().split(" ")
    return [int(i) for i in metric]

def find_best_cmiss(block:Block):
    target = block.target[block.trans['l1_dcm']]
    left = 0
    right = 2*target
    while left<right-1:
        mid = (left+right)//2
        block.param.cachenum = mid
        now_cmiss = get_now_metric(block,'PAPI_L1_DCM')[0]
        #print(now_cmiss,target,mid)
        if abs(now_cmiss-target)/target < 0.02 or abs(now_cmiss-target) < 100:
            break
        if now_cmiss < target:
            left = mid+1
        else:
            right = mid-1

def find_best_bmiss(block:Block):
    target = block.target[block.trans['br_msp']]
    if target < 200:return
    left = 0
    right = 2*target
    while left<right-1:
        mid = (left+right)//2
        block.param.branchnum = mid
        now_bmiss = get_now_metric(block,'PAPI_BR_MSP')[0]
        #print(now_bmiss,target,mid)
        if abs(now_bmiss-target)/target < 0.02 or abs(now_bmiss-target) < 200:
            break
        if now_bmiss < target:
            left = mid+1
        else:
            right = mid-1

def if_need_unroll(block:Block):
    record_cachenum = block.param.cachenum
    while block.param.unroll <= 4:
        temp_metric = []
        for i in range(5):
            temp_metric.append(get_now_metric(block,'PAPI_BR_CN:PAPI_TOT_CYC:PAPI_TOT_INS'))
        now_metric = [sum(e)/len(e) for e in zip(*temp_metric)]
        #print_compare_block(block)
        if now_metric[0]<0.9*block.target[block.trans['br_cn']] and now_metric[1]<0.7*block.target[block.trans['cyc']]:
            break
        block.param.unroll += 1
        block.param.cachenum = record_cachenum // (1<<block.param.unroll)

def find_best_rest(block:Block):
    temp_metric = []
    for i in range(5):
        temp_metric.append(get_now_metric(block,'PAPI_TOT_CYC:PAPI_TOT_INS:PAPI_LST_INS'))
    now_metric = [int(sum(e)/len(e)) for e in zip(*temp_metric)]
    now_br = get_now_metric(block,'PAPI_BR_CN')[0]
    block.param.restbranch = block.target[block.trans['br_cn']]-int(now_br)
    need_cyc = max(block.target[block.trans['cyc']] - now_metric[0] - block.param.restbranch,0)
    need_ins = max(block.target[block.trans['ins']] - now_metric[1] - 3*block.param.restbranch,0)
    need_lst = max(block.target[block.trans['lst']] - now_metric[2],0)
    y = [need_cyc,need_ins,need_lst]
    z = [block.target[block.trans['cyc']],block.target[block.trans['ins']],block.target[block.trans['lst']]]
    param_for_x = [     #order:add pause nop div
        [1,  10,0.27,  16],
        [4,   1,   1,   3],
        [3,   0,   0,   3]
    ]
    #Opt = Minimize(y,z,param_for_x)
    #Opt = Differential_evolution(y,z,param_for_x)
    Opt = Find_opt(y,z,param_for_x)
    block.param.add,block.param.pause,block.param.nop,block.param.div = Opt.findmin()


def print_compare_block(block:Block):
    now_metric = get_now_metric(block,'PAPI_LST_INS:PAPI_L1_DCM:PAPI_TOT_INS')
    now_metric += get_now_metric(block,'PAPI_TOT_CYC:PAPI_BR_CN:PAPI_BR_MSP')
    print(block.target)
    print(now_metric)

def find_best_block(block:Block):
    find_best_cmiss(block)
    #print("cachemiss clear")
    find_best_bmiss(block)
    #print("branchmiss clear")
    if_need_unroll(block)
    #print("unroll clear")
    find_best_rest(block)
    #print("rest clear")
    print_compare_block(block)




if __name__ == "__main__":
    #MG.B
    #data = {0: [2970, 380, 5828, 20811, 903, 45], 1: [2063, 240, 3939, 12424, 587, 39], 2: [168, 17, 351, 587, 59, 1], 3: [15257942, 568882, 73719084, 36983497, 12920800, 67849], 4: [924, 201, 1757, 1197, 270, 16], 7: [2231561, 277858, 13471544, 9581829, 2264974, 17063], 8: [34590, 376, 136578, 91246, 34010, 15], 9: [33397, 19137, 193179, 414050, 16709, 134], 13: [66923, 23355, 317289, 207441, 50518, 135], 14: [34504, 4377, 137866, 46578, 34083, 3], 15: [33988, 4481, 169975, 101050, 17109, 135], 18: [67309, 8589, 303469, 102301, 50775, 133], 23: [4228815, 271164, 25485671, 8736316, 4244575, 16703], 24: [39714697, 1238575, 86848543, 32966744, 4326755, 33082], 37: [34320, 2325, 171120, 73958, 17231, 142], 39: [8889870, 453031, 20581573, 10955420, 590311, 8456], 41: [8613, 4779, 49060, 47104, 4305, 70], 44: [42282, 8936, 181417, 80201, 38102, 69], 45: [8904, 1225, 44230, 19833, 4497, 67], 52: [9055, 663, 44824, 22199, 4559, 74], 53: [1168241, 61841, 2763150, 1062173, 108071, 559], 54: [2381, 1238, 12836, 9902, 1169, 5], 58: [2518, 357, 12146, 5273, 1260, 15], 66: [182883, 10944, 482607, 158929, 44359, 82], 67: [838, 296, 3806, 2217, 381, 4], 74: [51659, 4778, 178328, 58513, 36060, 33], 87: [153369, 7229, 450638, 152245, 54035, 106], 88: [126276, 5733, 332984, 113731, 43750, 44], 89: [881598, 32112, 2354400, 836999, 172427, 2921], 92: [713045, 22354, 1593048, 588923, 105830, 2125], 93: [6414274, 223714, 16779558, 5967998, 1060475, 12878], 105: [5238144, 144427, 11332378, 4196403, 583270, 8359], 116: [47328407, 1715932, 115708627, 46895838, 5705030, 54211], 147: [15270266, 1089660, 73878191, 47812868, 12937511, 67885], 194: [713045, 22355, 1593048, 571798, 105830, 219], 432: [881584, 32348, 2354398, 810393, 172427, 530], 531: [881586, 32311, 2354398, 819293, 172427, 1810], 5: [8861578, 447611, 20427015, 14273217, 574673, 6031], 6: [1168547, 59795, 2763229, 1079620, 108071, 1198], 10: [8892841, 452129, 20596864, 15231241, 591851, 4401], 11: [881588, 32276, 2354398, 811810, 172427, 1013], 12: [713054, 22335, 1593048, 756504, 105830, 952], 16: [20390, 1794, 44283, 129186, 7396, 523], 17: [73500, 2723, 162778, 260308, 25740, 1224]}
    #test  
    data = {0: [1745, 254, 3404, 14970, 530, 31], 1: [200371545, 12123768, 563836958, 758823934, 78513969, 6527797], 4: [160, 15, 333, 508, 60, 0], 6: [6993533, 2498228, 21204084, 29245092, 2368639, 37507], 7: [112706, 10517, 337898, 180224, 37574, 2], 9: [112710, 14157, 525427, 213852, 75075, 3], 12: [262727, 23577, 900348, 397891, 75075, 8], 100: [75294, 9579, 337932, 150853, 37577, 3], 101: [75226, 9474, 525423, 143063, 37577, 6], 162: [338107, 42349, 1088810, 987426, 112701, 27], 2: [200224614, 12130174, 563408978, 810167395, 78460018, 9140033], 3: [11036, 1037, 23336, 70929, 3919, 240], 5: [263914, 33612, 752667, 926526, 75390, 27], 8: [74048, 2944, 164198, 243196, 26096, 1125]}
    #MG.C
    #data = {0: [2969, 328, 5828, 22336, 903, 44], 1: [2063, 239, 3939, 13845, 587, 39], 2: [168, 16, 349, 626, 59, 1], 4: [60007423, 2218659, 290774781, 168573111, 51131802, 133918], 5: [805, 172, 1893, 1448, 258, 13], 6: [8787628, 1093167, 52756645, 99301617, 8853900, 33741], 7: [134308, 957, 534084, 335546, 133338, 18], 8: [66418, 41302, 384562, 1858308, 33124, 132], 12: [199026, 55856, 894825, 1378876, 166230, 137], 13: [134633, 16903, 537762, 228691, 133609, 3], 14: [66551, 8783, 332635, 360171, 33364, 136], 17: [180344, 24806, 742066, 394069, 152087, 96], 19: [133707, 16727, 669365, 472800, 67154, 263], 23: [16911193, 1074415, 101628555, 45078738, 16910175, 33182], 24: [157062799, 6657511, 344040995, 184313383, 17138554, 65972], 38: [134102, 8868, 669521, 309224, 67151, 268], 40: [35204697, 2210622, 81562158, 64299330, 2323962, 16763], 42: [16807, 9672, 96847, 307473, 8400, 70], 46: [16926, 2360, 84466, 84116, 8524, 67], 51: [34214, 4320, 171175, 95982, 17238, 133], 53: [34319, 2302, 171120, 74100, 17231, 140], 54: [4579881, 243315, 10848825, 10358078, 420775, 4293], 56: [4433, 2429, 24783, 35663, 2193, 35], 61: [4489, 679, 21992, 15637, 2252, 34], 66: [9028, 1172, 44853, 20017, 4564, 68], 68: [9055, 670, 44824, 21176, 4559, 71], 69: [704875, 46132, 1868913, 930231, 172551, 606], 71: [1338, 659, 6874, 4326, 629, 5], 77: [2560, 319, 12438, 4935, 1295, 3], 87: [913, 97, 3884, 2230, 430, 4], 97: [194906, 17826, 697983, 230390, 143943, 88], 100: [563430, 31420, 1667673, 587024, 204659, 1653], 104: [485247, 26683, 1317801, 465534, 174165, 1090], 107: [3346678, 127934, 8947834, 4084040, 654411, 6547], 118: [2739800, 87324, 6153496, 2369726, 410150, 4210], 128: [24967044, 871868, 65342458, 48754692, 4114427, 35975], 143: [20517801, 564712, 44500912, 21341954, 2288614, 16598], 156: [186737705, 8773855, 457023169, 319061709, 22533702, 107848], 201: [60071180, 4304812, 291406650, 365518564, 51198433, 134122], 576: [90540, 60571, 392579, 2726000, 33107, 133], 3: [525761, 29168, 1499235, 517654, 189979, 347], 9: [66014, 41503, 379078, 16644560, 33095, 134], 10: [20390, 1744, 44241, 163694, 7385, 548], 11: [73444, 2663, 162487, 263919, 25699, 1303]}

    #SP.B 16
    #data = {0: [3563, 405, 7093, 24141, 1126, 56], 1: [780, 106, 1496, 2862, 236, 14], 2: [226, 19, 451, 1220, 74, 1], 5: [78030858, 349929, 218515311, 84970703, 9077836, 23542], 7: [1373, 178, 2703, 6941, 418, 30], 8: [24088749, 1719760, 76229100, 46349517, 2665358, 13114], 10: [725596, 63542, 2055717, 3531540, 169454, 741], 11: [2047314, 91549, 4770570, 2301674, 229358, 911], 16: [2284581, 117280, 5372594, 2454924, 263747, 971], 17: [156783, 11041, 483922, 144746, 17037, 39], 18: [494935, 42757, 1560729, 1725682, 86551, 194], 22: [3340291, 189426, 8325046, 6926418, 473455, 1858], 24: [1990570, 56175, 4281306, 1819767, 205554, 849], 41: [268917, 27689, 997090, 843608, 17036, 47], 46: [35916224, 284411, 88924021, 39421701, 2967794, 3996], 47: [239822, 50150, 1344032, 1559221, 136190, 762], 85: [1949589, 214097, 6772092, 9062070, 576145, 1527], 1089: [1951295, 215481, 6775610, 7088434, 576199, 2383], 5111: [24032165, 1716945, 76082348, 54965328, 2655877, 9484], 5336: [694132, 62628, 1956211, 4159461, 162640, 1210], 9533: [8164947, 219902, 20611185, 14210688, 1175422, 3593], 3: [2302856, 120250, 5653617, 3097983, 276353, 3821], 4: [763328, 90414, 2183197, 5507347, 177804, 850], 6: [24034323, 1726858, 76096772, 48349919, 2655997, 30276], 9: [35901744, 284673, 88888206, 39694406, 2966561, 5798], 12: [24076757, 1722205, 76192496, 48683630, 2663959, 19743], 13: [1687999, 77703, 4204558, 2685945, 195090, 1781], 14: [720761, 66502, 1994814, 2283699, 169317, 2244], 15: [3301055, 177844, 8369610, 8098426, 469221, 5489], 19: [496882, 51193, 1788151, 1386613, 88659, 2958], 20: [34980, 2684, 77230, 226204, 12655, 976], 21: [97815, 2239, 234371, 270823, 34670, 1120], 23: [61413, 1911, 135418, 149846, 21611, 830]}
    #SP.C 16
    #data = {0: [3563, 384, 7093, 24807, 1126, 56], 1: [651, 59, 1204, 4436, 189, 6], 2: [223, 18, 448, 3127, 74, 1], 5: [310585576, 1341892, 866408600, 351237024, 35490434, 300860], 7: [1374, 177, 2703, 8049, 418, 31], 8: [97262722, 6592101, 321487514, 280038896, 10298844, 187738], 10: [2962814, 272934, 9294855, 17276539, 673217, 6146], 11: [7845188, 222134, 17845993, 12686414, 824126, 5134], 14: [7400453, 236812, 17476488, 13933595, 800408, 2146], 16: [9390089, 354097, 23358053, 18569735, 1115006, 11548], 18: [640642, 41814, 1969325, 863449, 67390, 1663], 19: [1972561, 152578, 6405186, 7309358, 340970, 8497], 23: [13627635, 754113, 34783259, 37610799, 1883038, 19874], 40: [8128149, 360272, 17484479, 10794107, 818511, 5143], 42: [8030201, 350596, 17549667, 11225541, 818461, 2139], 44: [9917823, 559436, 22350200, 16277857, 1114354, 11699], 45: [1095563, 104493, 4318769, 3721459, 67395, 1592], 46: [2005766, 213715, 5761917, 5276609, 340797, 8346], 47: [1095352, 104566, 4317947, 3751700, 67384, 77], 50: [143441361, 1082925, 353793568, 157738109, 11763267, 57034], 51: [598277, 125085, 3365756, 9682825, 334415, 6541], 88: [7536298, 792167, 25393984, 37617989, 2083601, 47629], 115: [2989689, 418244, 9461373, 22893769, 678844, 6309], 237: [1100999, 105767, 4337519, 3857766, 67675, 893], 445: [625239, 41165, 1950066, 993729, 65779, 867], 522: [641642, 41854, 1969085, 1049532, 67493, 88], 550: [2957886, 270477, 9271071, 20136699, 672323, 3499], 636: [13590458, 1062586, 34017443, 43632293, 1873647, 20275], 1991: [2972461, 424319, 9416323, 22768847, 675235, 3855], 13954: [32763136, 853424, 82763962, 51816201, 4686036, 48701], 3: [3052116, 577568, 9643200, 26687084, 691965, 6645], 4: [1962247, 138616, 5747558, 6911117, 337623, 5787], 6: [2964671, 537921, 9370012, 27626741, 672699, 3344], 9: [310663827, 1816052, 866648081, 420590754, 35499753, 302392], 12: [8202295, 350371, 18019618, 11474686, 839206, 3198], 13: [13650930, 835166, 34198593, 48418651, 1882775, 13389], 15: [310703106, 3091630, 866724464, 359204242, 35503709, 301017], 17: [34903, 4658, 76957, 183760, 12617, 920], 20: [97734, 2161, 233772, 373762, 34603, 1111], 21: [61465, 1940, 135400, 202792, 21602, 809]}
    blocks = []
    count = 0
    for i in data.values():
        target = i
        print(count)
        block = Block(target,count)
        find_best_block(block)
        blocks.append(block)
        count += 1
    code = Code(path,blocks,'withoutpapi','block')
    code.gen_code()


    # data in input.txt
    # with open('./input.txt','r') as f:
    #     n = int(f.readline())
    #     blocks = []
    #     for i in range(n):
    #         target = [int(j) for j in f.readline().split(',')]
    #         block = Block(target,i)
    #         find_best_block(block)
    #         blocks.append(block)
    #     code = Code(path,blocks,'withoutpapi','block')
